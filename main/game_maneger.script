
local levelObjekts = {}

-- Timed
local totalTimeToCollect = 200
local timeToCollectLeft
local dmgTimeLosPenelty = 20
-- 


-- Player
local spinemodel_url
local player
local playerStartingLives = 3
local playerTimesHit = 0
local PlayerCoins
local playerX_spawn = 110
local playerDead = false
--
local gameActive = false

local level_heights = { 35, 280, 500 }
local level_heights_recipients = {
	"/hero#hero"
}
--

local beginEndingRound = false
local timeWaitAfterGameOver = 7
local allDone = false

local def_objekt_spawn_cooldown = 3
local def_objekt_spawn_cooldown_add = 3

local def_move_speed = 5
local coin_spawn_cooldown = 0.5
local coin_spawn_interval = 2

local spike_spawn_cooldown = 1.5

local star_spawn_cooldown = 0

local gameTime = 0
local spikeSpawnExponentialIncrease = 0.03

local gamemode
local difficulty

local width, height = window.get_size()



-- Sun and Moon

local timeDayNightCycel = 30
local moonSun_spawn_cooldoown = 0
local spawnSun = false

--

local runPlatformHigh
local runPlatformLow
local runPlatformsSeperationY = 50

local allSpawnX = 1800

function init(self)

	timeToCollectLeft = totalTimeToCollect
	-- Hämtar fönstrets bredd och höjd
	--print("HJJJJJJJJJJJJJJJJJJJJJJJJJ")

	
	--local text_url = msg.url("/text_holder#GameOver") -- URL till textkomponenten
	--go.set(text_url, "color.w", 0) -- Sätter alfa (w) till 0 för att göra den osynlig


	
	-- Skicka meddelandet till alla mottagare
	for _, recipient in ipairs(level_heights_recipients) do
		--msg.post(recipient, "set_level_heights", { heights = level_heights })
	end
	UpdateSpeed()
	--print(def_move_speed)
	runPlatformLow = factory.create("#runner_platform_factory",  vmath.vector3(0, level_heights[2] - runPlatformsSeperationY, 0), nil, {}, 0.5)
	runPlatformHigh = factory.create("#runner_platform_factory",  vmath.vector3(0, level_heights[3] + runPlatformsSeperationY, 0), nil, {}, 0.5)
	local m = factory.create("/game_maneger#menu_factory", vmath.vector3(width / 2 ,(height / 2) - 60, 1), nil, {}, 1)
	
end


function update(self, dt)

	UpdateAllLevelObjektsPosition()
	
	if beginEndingRound and gameActive then
		timeWaitAfterGameOver = timeWaitAfterGameOver - dt
		print(timeWaitAfterGameOver)
		if timeWaitAfterGameOver <= 0 then
			GameOver("Game Finished", vmath.vector4(0, 1, 0, 1))
		end
	end
	if gamemode == "Timed" and timeToCollectLeft <= 0  and gameActive and not beginEndingRound then
		EndRound()
	end
	
	star_spawn_cooldown = star_spawn_cooldown -dt
	moonSun_spawn_cooldoown = moonSun_spawn_cooldoown -dt



		
		if not beginEndingRound then
			if star_spawn_cooldown < 0 then
				local hs = level_heights[math.random(#level_heights)]
				hs = hs + math.random(10, 100)
				local new_objekt = factory.create("#star_factory",  vmath.vector3(allSpawnX, hs, 0), nil, {}, 0.5)
				--msg.post(new_objekt, "set_speed", { speed = math.random(3, 6), name = "star" })
				table.insert(levelObjekts, new_objekt)
				local random_rotation = math.random() * 360  -- Slumpmässig rotation mellan 0 och 360 grader
				--print(random_rotation)
				local random_rotation_rad = math.rad(random_rotation)  -- Omvandla till radianer
				go.set(new_objekt, "rotation", vmath.quat_rotation_z(random_rotation_rad))
				go.set_scale(math.random(1, 1.8), new_objekt)


				star_spawn_cooldown = math.random(3, 6)

			end

			if moonSun_spawn_cooldoown < 0 then

				local url 
				if spawnSun then
					url = "/game_maneger#sun_factory"
				else
					url = "/game_maneger#moon_factory"
				end

				local new_objekt  = factory.create(url,  vmath.vector3(allSpawnX, 600, 0), nil, {}, 0.6)
				--msg.post(new_objekt, "set_speed", { speed = (1)})
				table.insert(levelObjekts, new_objekt)
				moonSun_spawn_cooldoown = timeDayNightCycel
				spawnSun = not spawnSun


			end

		

			if  gameActive  then
				gameTime = gameTime + dt
				timeToCollectLeft = timeToCollectLeft - dt
				UpdateTimmer(self)
				def_objekt_spawn_cooldown = def_objekt_spawn_cooldown -dt
				--if def_objekt_spawn_cooldown < 0 then
				coin_spawn_cooldown = coin_spawn_cooldown - dt
				spike_spawn_cooldown = spike_spawn_cooldown - dt
				if coin_spawn_cooldown < 0 then
					local h = level_heights[math.random(#level_heights)]
					--print("hhhhhhh    " ..h)
					local new_objekt = factory.create("#coin_factory",  vmath.vector3(allSpawnX, h, 0), nil, {}, 0.5)
					--msg.post(new_objekt, "set_speed", { speed = def_move_speed })
					table.insert(levelObjekts, new_objekt)
					coin_spawn_cooldown = coin_spawn_interval
					--def_objekt_spawn_cooldown = def_objekt_spawn_cooldown_add

				end
				if  spike_spawn_cooldown < 0 then
					local ha = level_heights[math.random(#level_heights)]
					--print("hhhhhhh    " ..h)
					local new_objekt = factory.create("#spike_factory",  vmath.vector3(allSpawnX, ha, 0), nil, {}, 0.5)
					--msg.post(new_spike, "set_speed", { speed = def_move_speed})
					table.insert(levelObjekts, new_objekt)
					
					local cooldown =  7 * math.exp(-spikeSpawnExponentialIncrease * gameTime)
					if cooldown < 0.5 then
						cooldown = 0.5
					end
					spike_spawn_cooldown = cooldown
					--print("C:   "..cooldown)
					--def_objekt_spawn_cooldown = def_objekt_spawn_cooldown_add

				end
			end
		end
		
		--end

		
	

end

function UpdateAllLevelObjektsPosition()

	for i = #levelObjekts, 1, -1 do
		local url = levelObjekts[i]
		--print("Processing object with URL:", tostring(url)) -- Gör URL:en läsbar

		local ok, objketPos = pcall(go.get_position, url)
		if ok then
			--print("Old position:", objketPos)

			objketPos.x = objketPos.x - def_move_speed
			go.set_position(objketPos, url)

			--print("New position:", objketPos)

			if objketPos.x < -100 then
				go.delete(url)
				table.remove(levelObjekts, i)
				--print("Object deleted:", tostring(url))
			end
		else
			--print("Error fetching position for:", tostring(url))
		end
	end
	
	

end

function EndRound()
	--UpdateTimmer(self)
	--UpdateLivesLable(self)
	beginEndingRound = true
end

function PlayerTakeDmg(self)
	sound.play("/SoundManeger#spikeHit")
	if gamemode == "Endless" then
		-- Hämta aktuell text från labeln
		local current_text = label.get_text("/text_holder#Coins")
		local current_coins = tonumber(string.match(current_text, "%d+")) or 0
		-- Extrahera nuvarande antal mynt från texten (om den t.ex. är "Coins: 3")
		local red = (  math.floor((current_coins / 3) + 0.5)) -- Lägg till 0.5 och ta golvet
		local minCoinLos = 5

		if red < minCoinLos then -- Förlorar minimum 10 coins
			red = minCoinLos
		end

		local new_coins = current_coins - red
		local new_text = "Coins: "
		if new_coins >= 0 then

			--print(current_coins .."  - ".. red .. "  =  " ..new_coins )

			-- Uppdatera texten i labeln med det nya värdet
			new_text = new_text .. tostring(new_coins)

		else 

			playerTimesHit = playerTimesHit + 1
			new_text = new_text .. "0"
			UpdateLivesLable(self)
			
			
			
		end
		label.set_text("/text_holder#Coins", new_text)
		if (playerStartingLives - playerTimesHit) <= 0 then
			-- Die and restart
			msg.post(player, "playerDie")
			playerDead = true
			sound.play("/SoundManeger#playerDie")
			--local text_url = msg.url("/text_holder#GameOver") -- URL till textkomponenten
			--go.set(text_url, "color.w", 1) -- Sätter alfa (w) till 1 för att göra den synlig
			EndRound()

		end
	
	end

	if gamemode == "Timed" then
		playerTimesHit = playerTimesHit + 1
		timeToCollectLeft = timeToCollectLeft - dmgTimeLosPenelty
		if timeToCollectLeft < 0 then
			timeToCollectLeft = 0
		end
		UpdateTimmer(self)
		
	end
		
	
end

function UpdateLivesLable(self)
	if gamemode == "Timed" then
		
		label.set_text("/text_holder#Lives", "Times hit: "..playerTimesHit )

	elseif gamemode == "Endless" then
		label.set_text("/text_holder#Lives", "Lives: ".. (playerStartingLives - playerTimesHit))
	end


end
function UpdateTimmer(self)
	if gamemode == "Endless" then
		--print("TTTTTT eeeeee")
		label.set_text("/text_holder#Timer", "Time: "..math.floor(gameTime + 0.5))
	elseif gamemode == "Timed" then
		--print("TTTTTT tttttttt")
		label.set_text("/text_holder#Timer", "Time: "..math.floor(timeToCollectLeft + 0.5))
	end
	
end

function UpdateSpeed()
	msg.post("/level/ground/controller_ground#ground", "set_speed", { speed = def_move_speed, name = "ground" })
end
	
function StartGame(self)
	moveObjektStartEndOfRound(true)
	gameActive = true
	label.set_text("/text_holder#Coins", "Coins: 0")
	ApplyDifficulty(self)
	player = factory.create("/game_maneger#player_factory", vmath.vector3(playerX_spawn, level_heights[1], 1),nil, {}, 0.2)
	msg.post(player, "set_level_heights", { heights = level_heights })
	msg.post(player, "set_starting_lives", { lives = playerStartingLives })
	
	-- Bygg URL för spinemodellen
	spinemodel_url = msg.url(player) -- Skapar en bas-URL från instans-ID:t
	spinemodel_url.fragment = "spinemodel" -- Lägg till komponentnamnet
	msg.post(player, "spineURL", { spineURL = spinemodel_url })
	UpdateLivesLable(self)
end

function GameOver(text, color)
	moveObjektStartEndOfRound(false)
	if not playerDead then
		sound.play("/SoundManeger#Win")
	end
	UpdateLivesLable(self)
	UpdateTimmer(self)
	gameActive = false
	print("GameOver")
	def_move_speed = 0
	UpdateSpeed()
	msg.post(player, "gameOver")
	local pos = vmath.vector3( width/ 2, (height / 2 )+ 110, 0)
	local gameObjekt =factory.create("/game_maneger#gameOver_factory", pos, nil, {}, 1)
	local gameLabel_url = msg.url(gameObjekt)
	gameLabel_url.fragment = "GameLabel"
	-- Ändra texten på label-komponenten
	
	label.set_text(gameLabel_url, text)
	--label.set_color(label_url, vmath.vmath.color)

	-- Ändra färgen på label-komponenten (RGB-värden)


	local lableList = {"/text_holder#GameMode", "/text_holder#Difficulty","/text_holder#Lives","/text_holder#Coins", "/text_holder#Timer"}
	local gameLabel_url2 = msg.url(gameObjekt)
	gameLabel_url2.fragment = "GameStats"
	local newText = ""
	local i = 0
	for _, url in ipairs(lableList) do
		
		local tmptext = label.get_text(url)
		newText = newText ..tmptext
		i = i +1
		if i % 2 == 0 or true then
			newText = newText .."\n"
		end
		
	end
	newText = newText .. "\n[Esc] Exit"
	label.set_text(gameLabel_url2, newText)
	--local anim_props = { blend_duration = 0.15 }
	--spine.play_anim(spinemodel_url, hash("run-to-idle"), go.PLAYBACK_LOOP_FORWARD, anim_props)
		

end

function moveObjektStartEndOfRound(startOfGame)

	if startOfGame == false then
		local playerPos = go.get_position(player)
		go.set_position(vmath.vector3(playerPos.x, level_heights[2], playerPos.z), player)
		runPlatformsSeperationY = runPlatformsSeperationY * -1
	end
	
	
	-- Den nya positionen du vill att objektet ska röra sig till
	
	local targetPosPlatformHigh = go.get_position(runPlatformHigh)
	targetPosPlatformHigh.y = targetPosPlatformHigh.y - runPlatformsSeperationY
	local targetPosPlatformLow = go.get_position(runPlatformLow)
	targetPosPlatformLow.y = targetPosPlatformLow.y + runPlatformsSeperationY
	-- Tiden det ska ta för objektet att nå målet
	local duration = 1.0  -- sekunder
	-- Startar animationen
	go.animate(runPlatformHigh, "position", go.PLAYBACK_ONCE_FORWARD, targetPosPlatformHigh, go.EASING_LINEAR, duration)
	go.animate(runPlatformLow, "position", go.PLAYBACK_ONCE_FORWARD, targetPosPlatformLow, go.EASING_LINEAR, duration)

end

function ApplyDifficulty(self)
	if difficulty == "Hard" then
		print("HARRRRRD")
		dmgTimeLosPenelty = dmgTimeLosPenelty * 2
		spikeSpawnExponentialIncrease = spikeSpawnExponentialIncrease * 3
		playerX_spawn = playerX_spawn + 150
		def_move_speed = def_move_speed * 1.3
		timeWaitAfterGameOver = timeWaitAfterGameOver - 2
		UpdateSpeed()

		if gamemode == "Endless" then
			print("Apply endless")
			coin_spawn_interval = coin_spawn_interval * 5

			playerStartingLives = playerStartingLives - 1
			
			
		end
		
	end

end

function on_message(self, message_id, message, sender)
	if message_id == hash("coin") then
		local coinEffect_url = msg.url(player) -- Skapar en bas-URL från instans-ID:t
		coinEffect_url.fragment = "CoinCollect" -- Lägg till komponentnamnet
		sound.play("/SoundManeger#collectCoin")
		particlefx.play(coinEffect_url)
		print("plattttttttttttttttttttt")
	end
	if message_id == hash("mainMenuInput") then
		gamemode = message.gamemode
		print("gggggggggggggggggggggggggg      " .. gamemode)
		difficulty = message.difficulty
		StartGame(self)
	end
	if message_id == hash("playerDamaged") then
		PlayerTakeDmg(self)
	end
end