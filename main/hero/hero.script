-- gravity pulling the player down in pixel units/sˆ2
local gravity = -20
local dmgFlickerInterval = 0.5
local dmgInvaluableDuration  = 3
local dmgFlickerCooldwoon = 0
local dmgInvaluableLeft = 0
local playerIsInvaluable = false
local dmgTaken = false
local playerIsDead = false
local lives = 3
local dmgTran = 0.5
local showSprite = dmgTran


local level_heights
-- take-off speed when jumping in pixel units/s
local jump_takeoff_speed = 1300

-- 
local at_level = 1
--local target_level = 1
local currently_jumping = false
local foot_pos

local jumping = false 




function init(self)

	-- this lets us handle input in this script
	msg.post(".", "acquire_input_focus")
	-- save position
	self.position = go.get_position()
	msg.post("#", "reset")


	-- Shoot
	self.shoot_cooldown = 1.5
	self.shoot_timer = 0

end

function final(self)
	-- Return input focus when the object is deleted
	msg.post(".", "release_input_focus")
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the spine model to play the animation
		local anim_props = { blend_duration = 0.15 }
		spine.play_anim("#spinemodel", anim, go.PLAYBACK_LOOP_FORWARD, anim_props)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animation(self)
	-- make sure the right animation is playing
	
	if self.ground_contact then
		if at_level == 1 then
			
			play_animation(self, hash("run"))
		else

			
			play_animation(self, hash("hoverboard"))
		end
		--spine.play_anim("#spinemodel", "run", go.PLAYBACK_LOOP_FORWARD, { blend_duration = 0.15 }, 0) -- Track 0
		--spine.play_anim("#spinemodel", "shoot", go.PLAYBACK_LOOP_FORWARD, { blend_duration = 0.15 }, 1) -- Track 1
	else
		--play_animation(self, hash("jump"))

	end
end
function update(self, dt)

	
	dmgFlickerCooldwoon = dmgFlickerCooldwoon - dt
	dmgInvaluableLeft = dmgInvaluableLeft - dt

	if dmgInvaluableLeft < 0 then
		playerIsInvaluable = false
	end

	
	if dmgTaken and dmgInvaluableLeft > 0 and dmgFlickerCooldwoon < 0 then
		
		local spine_model_url = msg.url("hero#spinemodel") -- Kontrollera komponentvägen
		go.set(spine_model_url, "tint.w", showSprite) -- Sätter alfa till 0 för att göra modellen osynlig
		dmgFlickerCooldwoon = dmgFlickerInterval
		if showSprite < 1 then
			showSprite = 1
		else
			showSprite = dmgTran
		end
	end


	if dmgTaken and dmgInvaluableLeft < 0 then 
		dmgTaken = false
		playerIsInvaluable = false
		go.set("hero#spinemodel", "tint.w", 1) 
	end
	
	--(tostring(self.ground_contact))
	local gravity = vmath.vector3(0, gravity, 0)
	
	if not self.ground_contact then
		-- Apply gravity if there's no ground contact
		self.velocity = self.velocity + gravity
	end


	
	local pos = go.get_position()


	
	--print("Player position: ", pos)



	--print(self.ground_contact, "  ::  ", not jumping )
	
	
	-- apply velocity to the player character
	go.set_position(go.get_position() + self.velocity * dt)
	update_animation(self)
	-- reset volatile state
	self.correction = vmath.vector3()
	
	
	--Shoot
	self.shoot_timer = self.shoot_timer + dt

	--print(self.ground_contact, "  ::  ", not jumping )

	--print(self.ground_contact)
	
	
	--if self.ground_contact then
		--print("Level out   ", target_level)
		--target_level = at_level

	--end

	--print("At level" .. tostring( at_level), "  ::  target " .. tostring(target_level), " :: Grounded  " ..tostring(self.ground_contact))
	self.ground_contact = false

	if pos.x < 70 and false then
		msg.post("hero#hero", "reset")
		print("Reset")
	end
	
end

local function handle_geometry_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.ground_contact = true
		--print(tostring( self.ground_contact))
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_level_heights") then
		
		--print("jjjjjjjjjjjjjjjjjjjjjjjjjjjjj")
		level_heights = message.heights
		local new_text1 = "L1 ".. level_heights[1]
		--print(new_text1)
	end
	if message_id == hash("reset") then
		self.velocity = vmath.vector3(0, 0, 0)
		self.correction = vmath.vector3()
		self.ground_contact = false
		self.anim = nil
		go.set(".", "euler.z", 0)
		go.set_position(self.position)
		msg.post("#collisionobject", "enable")

	elseif message_id == hash("contact_point_response") then
		-- check if we received a contact point message
		if message.group == hash("danger") and not playerIsInvaluable then
			playerIsInvaluable = true
			dmgInvaluableLeft = dmgInvaluableDuration

			-- Hämta aktuell text från labeln
			local current_text = label.get_text("/text_holder#Coins")
			local current_coins = tonumber(string.match(current_text, "%d+")) or 0
			-- Extrahera nuvarande antal mynt från texten (om den t.ex. är "Coins: 3")
			local red = (  math.floor((current_coins / 3) + 0.5)) -- Lägg till 0.5 och ta golvet
			local minCoinLos = 5
			
			if red < minCoinLos then -- Förlorar minimum 10 coins
				red = minCoinLos
			end
			
			local new_coins = current_coins - red
			local new_text = "Coins: "
			if new_coins >= 0 then
				dmgTaken = true
				
				
				local new_coins = current_coins - red
				--print(current_coins .."  - ".. red .. "  =  " ..new_coins )

				-- Uppdatera texten i labeln med det nya värdet
				new_text = new_text .. tostring(new_coins)
				
			else 
				
				dmgTaken = true
				new_text = new_text .. "0"
				lives = lives - 1
				label.set_text("/text_holder#Lives", "Lives: "..lives)
			end
			label.set_text("/text_holder#Coins", new_text)
			if lives <= 0 then
				-- Die and restart
				playerIsDead = true
				play_animation(self, hash("death"))
				msg.post("#collisionobject", "disable")
				--print("Dmg taken")
				go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 160, go.EASING_LINEAR, 0.7)
				--go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, go.get_position().y - 200, go.EASING_INSINE, 0.5, 0.2,
				--function()
				--	msg.post("hero#hero", "reset")
				--	print("Reset")
				--end)
				local text_url = msg.url("/text_holder#GameOver") -- URL till textkomponenten
				go.set(text_url, "color.w", 1) -- Sätter alfa (w) till 1 för att göra den synlig
				
			end
			
			
			
			
		elseif message.group == hash("geometry") then
			handle_geometry_contact(self, message.normal, message.distance)
		end
	end
end

local function jump(self)
	-- only allow jump from ground
	if self.ground_contact and at_level < 3 and not playerIsDead then
		-- set take-off 
		
		--print("was at  ".. at_level)
		at_level = at_level + 1
		
		local pos = go.get_position()
		pos.y = level_heights[at_level]
		--print(at_level.. "  ".. level_heights[at_level])
		go.set_position(pos)
		--print(target_level)
		jumping = true
		--print("Jump")
		
	end
end

local function descend(self)
	if at_level > 1 and not playerIsDead then
		at_level = at_level - 1

		local pos = go.get_position()
		pos.y = level_heights[at_level]
		--print(at_level.. "  ".. level_heights[at_level])
		go.set_position(pos)
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") or action_id == hash("touch") then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end

	if action_id == hash("descend") then 
		if action.pressed then
			descend(self)
		end
	end

	
	
	if action_id == hash("shoot") and action.pressed and self.shoot_timer >= self.shoot_cooldown then 
		self.shoot_timer = 0
		local hero_pos = go.get_position()
		local bullet_pos = vmath.vector3(hero_pos.x + 30, hero_pos.y + 100, hero_pos.z)
		factory.create("#bullet_factory", bullet_pos)
		--print("SHOOOT")
		play_animation(self, hash("shoot"))
	end

	if  action_id == hash("level2") and action.pressed or action.repeated then 
		if false then
			local pos = go.get_position()  -- Hämtar den nuvarande positionen
			pos.y = 250                    -- Ändrar endast Y-värdet
			go.set_position(pos)           -- Sätter den nya positionen
			print("Hoppar till level 2")
		end
		
	end
	

end